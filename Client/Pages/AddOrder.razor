<h3>AddOrder</h3>

@page "/orders/add"
@page "/orders/edit/{Id:int}"

@using BlazorIntus2.Shared.DataModel
@using static BlazorIntus2.Shared.DataModel.Data

@inject HttpClient Http
@inject NavigationManager NavigationManager
<h1></h1>
<hr />
<EditForm Model="@order" OnValidSubmit="SaveOrder">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="Name" class="form-label">Name</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="order.Name" />
        </div>
        <ValidationMessage For="@(() => order.Name)" />
    </div>

    <div class="mb-3">
        <label for="Address" class="form-label">State</label>
        <div class="col-md-4">
            <InputText class="form-control" @bind-Value="order.State" />
        </div>
        <ValidationMessage For="@(() => order.State)" />
    </div>    

    @* <div class="mb-3">
        <label for="Windows" class="form-label">Windows</label>
        <div class="col-md-4">
            <InputSelect @bind-Value="@windows" class="form-control" id="id">
                @if (windows != null)
                {
                    <option value="">--Select--</option>
                    @foreach (var w in windows)
                    {
                        <option value="@w.Id">@w.Name</option>
                    }
                }
            </InputSelect>
        </div>        
    </div> *@ 

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
        <button class="btn btn-light" @onclick="Cancel">Cancel</button>
    </div>
</EditForm>


@code {
    [Parameter]
    public int Id { get; set; }
    protected string Title = "Add";
    protected Data.Order order = new();

    [Parameter] public string InitialText { get; set; } = "Select window";
    private List<Data.Window>? windows;
    private string? selectedString { get; set; }
    

    private async Task HandleValidSubmit()
    {
        order.OrderWindows = windows?.Where(w => w.Selected).Select(w => new OrderWindow { WindowId = w.Id }).ToList();
        await Http.PostAsJsonAsync("/api/order", order);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != 0)
        {
            Title = "Edit";
            order = await Http.GetFromJsonAsync<Data.Order>("api/Data/" + Id);
        }
    }
    protected async Task SaveOrder()
    {
        if (order.Id != 0)
        {
            await Http.PutAsJsonAsync("api/Data", order);
        }
        else
        {
            await Http.PostAsJsonAsync("api/Data", order);
        }
        Cancel();
    }
    public void Cancel()
    {
        NavigationManager.NavigateTo("/OrderDetails");
    }   
}
