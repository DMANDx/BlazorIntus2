@page "/OrderDetails"
@using BlazorIntus2.Shared.DataModel

@inject HttpClient Http
<h1>Data</h1>
<div class="row">
    <div class="col-md-6">
        <a href='/orders/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add order
        </a>
    </div>
    <div class="input-group col">
        <input type="text" class="form-control" placeholder="Search order by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterOrder" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</div>
<br />
@if (orderList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>State</th>
                <th>Edit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ord in orderList)
            {
                <tr>
                    <td>@ord.Id</td>
                    <td>@ord.Name</td>
                    <td>@ord.State</td>
                    <td>
                        <a href='/order/edit/@ord.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/order/delete/@ord.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                        <a href='/orders/addD/@ord.Id' class="btn btn-outline-info" role="button">
                            Add/Edit details
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    protected List<Data.Order> orderList = new();
    protected List<Data.Order> searchUserData = new();
    protected Data.Order order = new();
    protected string SearchString { get; set; } = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await GetOrder();
    }
    protected async Task GetOrder()
    {
        orderList = await Http.GetFromJsonAsync<List<Data.Order>>("api/Data");
        searchUserData = orderList;
    }
    protected void FilterOrder()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            orderList = searchUserData
                .Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToList();
        }
        else
        {
            orderList = searchUserData;
        }
    }
    protected void DeleteConfirm(int ordId)
    {
        order = orderList.FirstOrDefault(x => x.Id == ordId);
    }
    public void ResetSearch()
    {
        SearchString = string.Empty;
        orderList = searchUserData;
    }
}